/*
 * role: global configuration of breeze
 * desc: performs global configuration of the breeze library
 */
(function () {
  'use strict';

  // define service
  var serviceId = 'breeze.config';
  angular.module('app').factory(serviceId,
    ['$q', 'breeze', configBreeze]);

  // create service
  function configBreeze($q, breeze) {
    // breeze's entity manager, the 'center of gravity' for all 
    // breeze communication this will be shared across all modules
    var entityManager;

    // init service
    init();

    // service public signature
    return {
      entityManager: entityManager,
      dataService: getDataService()
    };

    function init() {
      // configure breeze to use WebAPIOData data service adapter & set as the default
      breeze.config.initializeAdapterInstance('dataService', 'webApiOData', true);

      // init entity manager
      initEntityManager()
        .then(function () {
          // ensure antiforgery token included in all HTTP requests
          configureDetaultHttpClient();

          // fixup the metadata processing of the response
          fixupMetadataProcessing();
        });
    }

    // create breeze data service w/ endpoint to the WebAPIOdata service
    function getDataService() {
      // set the data service endpoint
      return new breeze.DataService({
        serviceName: window.location.protocol + '//' + window.location.host + '/odata/'
      });
    }

    // initialize breeze entity manager
    function initEntityManager() {
      var deferred = $q.defer();

      // if entity manager hasn't been initialized, do it now
      if (entityManager === undefined) {
        // metadataStore must be populated before adding validators, so manually fetch metadata
        entityManager = new breeze.EntityManager(getDataService());
        // ^^^ normally this happens on the first query, but if someone jumps straight to
        //  a deep link to create something (ie: #/projects/new), no query will happen
        //  and therefore none of the validators will be created
        entityManager.fetchMetadata()
          .then(function () {
            configEntityIdentity();
            attachValidatorsToBreezeEntities();
            deferred.resolve();
          })
          .catch(function (exception) {
            common.logger.logError('failed to fetch service metadata', exception, serviceId);
            deferred.reject();
          });
      }

      return deferred.promise;
    }

    // configure the default HTTP client to include the antiforgery token in all requests
    function configureDetaultHttpClient() {
      // breeze uses datajs for OData requests
      // get a copy of the default OData client datajs uses
      var unsecuredClient = OData.defaultHttpClient;

      // create a new 'secured' http client...
      var securedClient = {
        request: function (request, success, error) {
          // that adds the verification token to it
          request.headers.RequestVerificationToken = jQuery("#__RequestVerificationToken").val();
          return unsecuredClient.request(request, success, error);
        }
      };

      // configure datajs to use the new secured client
      OData.defaultHttpClient = securedClient;
    }

    // configure the settings for the ID field as an identity
    function configEntityIdentity() {
      // set the project entity ID settings
      var projectType = entityManager.metadataStore.getEntityType('Project');
      projectType.autoGeneratedKeyType = breeze.AutoGeneratedKeyType.Identity;

      // set the reference entity ID settings
      var referenceType = entityManager.metadataStore.getEntityType('Reference');
      referenceType.autoGeneratedKeyType = breeze.AutoGeneratedKeyType.Identity;
    }

    // add custom client-side validators to the breeze entities
    function attachValidatorsToBreezeEntities() {
      // project entity
      //  title = required field 
      entityManager.metadataStore.getEntityType('Project')
        .getProperty('Title').validators.push(breeze.Validator.required());


      // reference entity
      var referenceEntity = entityManager.metadataStore.getEntityType('Reference');

      // project property = required field
      referenceEntity.getProperty('Project').validators.push(breeze.Validator.required());

      // url property = required field of type URL
      var urlProperty = referenceEntity.getProperty('Url');
      urlProperty.validators.push(breeze.Validator.required());
      urlProperty.validators.push(breeze.Validator.url());
    }

    // fixes the metadata response to ensure that the etag is treated as real metadata
    function fixupMetadataProcessing() {
      // get reference to the base 'visitNode' method
      var adapter = breeze.config.getAdapter('dataService'); 
      var visitNodeBase = adapter.prototype.jsonResultsAdapter.visitNode;

      // create a new 'visitNode' method that looks for the etag as a property on the entity
      //  if it isn't present in the metadata      
      adapter.prototype.jsonResultsAdapter.visitNode = function (node, mappingContext, nodeContext) {
        var metadata = node && node.__metadata;
        if (metadata && !metadata.etag && node.__eTag) {
          metadata.etag = node.__eTag;
        }

        //  .. then call the base 'visitNode'
        return visitNodeBase(node, mappingContext, nodeContext);
      }
    }
  }
})();